#+TITLE: Computing p-adic L-functions using Hilbert Eisenstein series

We try to implement Algorithm 2.3 in cite:lauder2010.
Let $F$ be a totally real number field of degree $d$.

Input: 
- $p$ - an odd prime number,
- $k_0$ - an integer in $[2, p]$,
- ψ - a character of F of modulus $\mf m$, with the same parity as $k_0$,
- m - a natural number.

Output:
- $L_p(\psi,s)$ as an element of the ring $O[ [s] ]/(p^m)$.

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
# F.<a> = NumberField(x^3-3*x-1) 
var ('x')
F.<a> = NumberField(x^2-15)

if not F.is_totally_real():
    print("F is not totally real!")

d = F.degree()
if d > 2:
    print("oopsie let's stick to quadratic fields for now")
psi = DirichletGroup(F.discriminant(), F)[1]
mfrak = psi.conductor()
p = 5

if p == 2:
   print("let's do odd primes for now")
k0 = 6

if (psi.is_odd() and k0 % 2) or (psi.is_even() and k0 % 2 == 1):
    print("psi must have parity of k0")

m = psi.conductor()
#+end_src

#+RESULTS:


*  Step (1)
  Introduce
  - $M \in \N$ the positive generator of $\mf m \cap \Z$.
  - $\Psi$ a Dirichlet character mod $M$, is the restriction of $\psi \omega^{1-k}$ to $(\Z/m\Z)^\times$ where $\omega$ is the \(p\)-adic Teichmüller character.
  - $\delta_m \in \N$ the smallest integer such that:
    - if $p=2$, then $i - v_p(i!) \geq m$ for all $i \geq \delta_m + 1$,
    - if $p \ne 2$, then $2i - v_p(i!) \geq m$ for all $i \geq \delta_m + 1$.

(Note that $\delta_m \le m(p-1)/(p-2)$ when $p \ne 2$, and $\delta_m \le m$ when $p = 2$.)

- $k_j \in \Z$ for all $0 \le j \le \delta_m$: 
- $B_j$ a basis for
  \[ M_{dk_j}(\Gamma_0(M),\Psi) \pmod{ p^{\delta_m +1}, q^S}
  \]
  for each $0 \le j \le \delta_m$, where is $S$ the Sturm bound for the space with $j=\delta_m$. 
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
M = psi.modulus()
Psi = psi
deltam = ceil(m*(p-1)/(p-2))

kj = [2+j*(p-1) for j in [0..deltam]]  # note k0 = 2 as above

S = ModularForms(Psi,d*kj[deltam]).sturm_bound()  # this is the precision in q necessary

Mdkj = [ModularForms(Psi, d*kj[j], base_ring=QQ) for j in [0..deltam]]

#+end_src

#+RESULTS:
* Step (2):
For all 1 ≤ n ≤ S − 1, compute the index sets
\[ X_n = \bigcup_{\mc C \in \mathrm{Cl}_{\mf m}^+} \mbb I(n,\mc C)_{\mf m}\]
where
\[
\mbb I(n,\mc C)_{\mf m} := \qty{(\mf a, \nu) \in \mscr I_{F,\mf m} \times \mf d^{-1}_+ : \substack{ \tr(\nu)= n,\ \mf a \mid (\nu) \mf d \\ (\mf a, \mf m) = 1,\  [\nu] = \mc C} }
\]

It is probably a good idea to do this explicitly for $d=2$, and leave $d=3$ for later.
In this case we can use the RM theory in section 3

Input:
- $n$ an integer
- $\mc C$ an element of $\mathrm{Cl}_{D}^+$ BUT actually a quadratic form of discriminant $D$


Output:
- the set $\mbb I(n,\mc C)_{D}$ as above (note $\mf m \to D$)

  #+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
n = 34
D = mfrak
D0 = D.squarefree_part()
f = sqrt(D/D0)
Q = BinaryQF_reduced_representatives(D)[0]
a, b, c = Q

if a != 0:
    tau = (-b + sqrt(D))/(2*a)
else:
    tau = 0
  #+end_src

  #+RESULTS:
(0) Determine $\tau \in \mf h$ so that $\mc C$ is represented by $[1,\tau]$.
Actually, it is probably better to work with quadratic forms directly in the algorithm (since these are actually more or less implemented)

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
Stab = []
for a in [-1..1]:
    for b in [-1..1]:
        for c in [-1..1]:
            for d in [-1..1]:
                if a*d-b*c == 1:
                    s = Matrix(ZZ,[[a,b],[c,d]])
                    if s^(12) == Matrix(ZZ,[[1,0],[0,1]]):
                        Stab.append(s)

# we might be able to consider only conjugacy classes?
# Stab =[Matrix(ZZ,[[0,1],[-1,0]]),Matrix(ZZ,[[0,1],[-1,-1]]), Matrix(ZZ,[[0,-1],[1,1]])]
Stab 
#+end_src

#+RESULTS:
: [
: [-1 -1]  [-1  0]  [-1  1]  [ 0 -1]  [ 0 -1]  [ 0 -1]  [ 0  1]  [ 0  1]
: [ 1  0], [ 0 -1], [-1  0], [ 1 -1], [ 1  0], [ 1  1], [-1 -1], [-1  0],
: 
: [ 0  1]  [ 1 -1]  [1 0]  [ 1  1]
: [-1  1], [ 1  0], [0 1], [-1  0]
: ]

(1) Compute the set
\[ M_n = \qty{ \mqty(n/d & j \\ 0 & d) : d \mid n, \ (d, n/d) = 1, \ 0 \le j \le d-1}
\]

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
Mn = []
for d in divisors(n):
    if gcd(d, n/d) == 1:
        for j in [0..d-1]:
            Mn.append(Matrix(ZZ,[[n/d,j], [0,d]]))

len(Mn)
#+end_src

#+RESULTS:
: 54

(2) For each $\gamma_n \in M_n$, do the following:
Test whether for some $\gamma'_n $ appearing before $\gamma_n$, we have $\gamma_n' \cdot \mathrm{Stab}_{\Sl_2(\Z)}(\tau)\cdot \gamma_n^{-1} \subset \Sl_2(\Z)$. If not, set flag to false.

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
RMn = []
def is_in_SL2Z(gamman,gnp,Stab):
    # """Returns True if $\gamma_n'\mathrm{Stab(\tau)}\gamma_n^-1
    # \subset \Sl_2(\Z), and false otherwise"""    
    flag = True
    for s in Stab:
        Mat = gnp*s*(gamman^-1)
        for i in [0..1]:
            for j in [0..1]:
                if not Mat[i][j].is_integer():
                    flag = False
    return(flag)

for k in [0..len(Mn)-1]:
    gamman = Mn[k]
    flag = False                # if True, then there exists some gamma_n'
                                # for which is_in_SL2Z is true
    for gnp in Mn[:k-1]:
        if is_in_SL2Z(gamman, gnp, Stab):
            flag = True
    if not flag:
        Q2 = Q.matrix_action_left(gamman)
        if gcd(f, Q2[0]) == 1:
            RMn.append([Q2.reduced_form(),gamman])
len(RMn)


#+end_src

#+RESULTS:
: 0

* Step (3):
  For each $0\le k_j\le \delta_m$ compute 
  \[
  \Delta_j^{\ge 1}(q) :=2^d \sum_{n=1}^{S-1}\qty(\sum_{(\mf a, \nu)\in X_n}\psi(\mf a) \mathrm{Nm}(\mf a)^{k_j-1})q^n
  \]
  to precision $p^{\delta_m}$.

  Key difficulty: evaluate $\psi(\mf a)$. The rest we can do with our current tools.
  
  #+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
# R.<q> = PowerSeriesRing(QQ)
deltam = ceil(m*(p-1)/(p-2))
load("worksheet.sage")
DeltaList = [2^d*sum(q^n * sum(Q2[0]^kj[j] for [Q2, nu] in get_RM_set(n,Q) for Q in BinaryQF_reduced_representatives(mfrak)) for n in [1..S-1]) for j in [0..deltam]]

[A[0]^(kj[0]-1) for Q in BinaryQF_reduced_representatives(mfrak) for [A, nu] in get_RM_set(n,Q)]

# psi(stableRoot(BinaryQF_reduced_representatives(mfrak)[1]))

# compute_Delta_j()

# RMlist = [get_RM_set(n, Q) for n in [1..10]]
# for n in [1..12]:
#     print(len(get_RM_set(n,Q)))

# BinaryQF_reduced_representatives(mfrak)
DeltaList
  #+end_src

  #+RESULTS:
  :RESULTS:
  : F =  Number Field in a with defining polynomial x^2 - 17 
  : p =  11 
  : k0 =  2 
  : m =  10 
  : psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
  # [goto error]
  #+begin_example

  TypeErrorTraceback (most recent call last)
  <ipython-input-20-e7b78bd533e1> in <module>
        2 deltam = ceil(m*(p-Integer(1))/(p-Integer(2)))
        3 load("worksheet.sage")
  ----> 4 DeltaList = [Integer(2)**d*sum(q**n * sum(Q2[Integer(0)]**kj[j] for [Q2, nu] in get_RM_set(n,Q) for Q in BinaryQF_reduced_representatives(mfrak)) for n in (ellipsis_range(Integer(1),Ellipsis,S-Integer(1)))) for j in (ellipsis_range(Integer(0),Ellipsis,deltam))]
        5 
        6 [A[Integer(0)]**(kj[Integer(0)]-Integer(1)) for Q in BinaryQF_reduced_representatives(mfrak) for [A, nu] in get_RM_set(n,Q)]

  <ipython-input-20-e7b78bd533e1> in <listcomp>(.0)
        2 deltam = ceil(m*(p-Integer(1))/(p-Integer(2)))
        3 load("worksheet.sage")
  ----> 4 DeltaList = [Integer(2)**d*sum(q**n * sum(Q2[Integer(0)]**kj[j] for [Q2, nu] in get_RM_set(n,Q) for Q in BinaryQF_reduced_representatives(mfrak)) for n in (ellipsis_range(Integer(1),Ellipsis,S-Integer(1)))) for j in (ellipsis_range(Integer(0),Ellipsis,deltam))]
        5 
        6 [A[Integer(0)]**(kj[Integer(0)]-Integer(1)) for Q in BinaryQF_reduced_representatives(mfrak) for [A, nu] in get_RM_set(n,Q)]

  /usr/lib/python3.9/site-packages/sage/rings/integer.pyx in sage.rings.integer.Integer.__sub__ (build/cythonized/sage/rings/integer.c:12951)()
     1872             return y
     1873 
  -> 1874         return coercion_model.bin_op(left, right, operator.sub)
     1875 
     1876     cpdef _sub_(self, right):

  /usr/lib/python3.9/site-packages/sage/structure/coerce.pyx in sage.structure.coerce.CoercionModel.bin_op (build/cythonized/sage/structure/coerce.c:11723)()
     1246         # We should really include the underlying error.
     1247         # This causes so much headache.
  -> 1248         raise bin_op_exception(op, x, y)
     1249 
     1250     cpdef canonical_coercion(self, x, y):

  TypeError: unsupported operand parent(s) for -: '<class 'sage.rings.polynomial.polynomial_ring.PolynomialRing_integral_domain_with_category'>' and 'Integer Ring'
  #+end_example
  :END:








* Ring class groups examples

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
load("worksheet.sage")
F.<a> = NumberField(x^2-12)
for n in sample([1..100],3):
    O = F.order(1,n*a)
    print(O.gens(), "\n f=", conductor(O), "\n Cl^+:", narrow_class_group(O), "\n")
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
# [goto error]
: 
: NameErrorTraceback (most recent call last)
: <ipython-input-10-52423a89322a> in <module>
:       3 for n in sample((ellipsis_range(Integer(1),Ellipsis,Integer(100))),Integer(3)):
:       4     O = F.order(Integer(1),n*a)
: ----> 5     print(O.gens(), "\n f=", conductor(O), "\n Cl^+:", narrow_class_group(O), "\n")
: 
: NameError: name 'narrow_class_group' is not defined
:END:




#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
load("worksheet.sage")
F.<a> = NumberField(x^2-13)
O = F.order(1,(1+11*a)/2)
print(O.gens(), "\n index:", conductor(O), "\n narrow class group:", narrow_class_group(O))
# pari("bnrinit(bnfinit(x^2-13),[{},{}],1).cyc".format(11, [1,1]))
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
# [goto error]
: 
: NameErrorTraceback (most recent call last)
: <ipython-input-11-0e1d09e5529f> in <module>
:       2 F = NumberField(x**Integer(2)-Integer(13), names=('a',)); (a,) = F._first_ngens(1)
:       3 O = F.order(Integer(1),(Integer(1)+Integer(11)*a)/Integer(2))
: ----> 4 print(O.gens(), "\n index:", conductor(O), "\n narrow class group:", narrow_class_group(O))
:       5 # pari("bnrinit(bnfinit(x^2-13),[{},{}],1).cyc".format(11, [1,1]))
: 
: NameError: name 'narrow_class_group' is not defined
:END:


This is weird, cf example 3.3 and magma:
R<x> := PolynomialRing(Integers());
F := NumberField(x^2-13);
M := MaximalOrder(F);
O := sub< M |1, 11*M.2>;
Index(M,O);
Discriminant(O);
RingClassGroup(O);
D := Divisor(11 *M)+Divisor(RealPlaces(F)[1])+Divisor(RealPlaces(F)[2]);
RayClassGroup(D); 


#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
load("worksheet.sage")
F.<a> = NumberField(x^2-321)
O = F.maximal_order()
print(O.gens(), "\n index:", conductor(O), "\n narrow class group:", narrow_class_group(O))
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
# [goto error]
: 
: NameErrorTraceback (most recent call last)
: <ipython-input-12-c9ec1bd7c6ab> in <module>
:       2 F = NumberField(x**Integer(2)-Integer(321), names=('a',)); (a,) = F._first_ngens(1)
:       3 O = F.maximal_order()
: ----> 4 print(O.gens(), "\n index:", conductor(O), "\n narrow class group:", narrow_class_group(O))
: 
: NameError: name 'narrow_class_group' is not defined
:END:

Checks out. 


Finally, let's check if it works with higher number fields:
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
load("worksheet.sage")
F.<a> = NumberField(x^3 -3*x-1)
M = F.maximal_order()
# F.order(5*M)
P = x^3 -3*x-1
# O = F.order(1,5*a,5*a^2)
pari("bnrinit(bnfinit({}),[{},{}],1).cyc".format(P, 5, [0 for n in [1..3]]))
# print(O.gens(), "\n index:", conductor(O), "\n narrow class group:", narrow_class_group(O))
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
: [2]
:END:

** Arbitrary ideals:

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar

load("worksheet.sage")
F.<a> = NumberField(x^3 -3*x-1)
# P = F.pari_polynomial()
m = 7
mod_narrow_class_group(F,m)
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
: Additive abelian group isomorphic to Z/6
:END:

* Trivial character
Let's implement the algorithm without worrying about character, for now.
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
F.<a> = NumberField(x^2-17)
d = F.degree()
assert d == 2
#M = 1
k0 = 2
p = 13
deltam = ceil((p-1)/(p-2))

kj = [k0+j*(p-1) for j in [0..deltam]]  # note k0 = 2 as above

R.<q> = PowerSeriesRing(QQ) 
S = ModularForms(weight=d*kj[deltam]).sturm_bound()
Mdkj = [ModularForms(weight=(d*kj[j])).q_expansion_basis(prec=S) for j in
        [0..deltam]]
print(len(Mdkj))
for m in Mdkj:
    print(len(m))
#+end_src

#+RESULTS:
: 3
: 1
: 3
: 5
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar :cache no
load('worksheet.sage')
Deltaj = []
for j in [0..deltam]: 
    Deltaj.append(2^d*sum(q^n * sum(A.norm()^(kj[j]-1) for nu in
                                  tp_elts_of_trace_n(F,n) for A in
                                  divisors(nu*(F.different()))
                        ) for n in [1..S-1]))

Deltaj

# # j = 1:
# Delta1 = 0
# for n in [1..S-1]:
#     for nu in tp_elts_of_trace_n(F, n):
#         for A in divisors(nu*(F.different())):
#             Delta1+= 2^d * q^n * A.norm()^(kj[1]-1)
# assert Delta1 == Deltaj[1]

# [A.norm() for A in divisors(tp_elts_of_trace_n(F,3)[-1]*F.different())]
#+end_src

#+RESULTS[eddc259fd6eb829cb6ff76f9aec33edac6d27221]:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
: [80*q + 720*q^2 + 2240*q^3 + 5840*q^4 + 10080*q^5,
:  537002000*q + 78083306290604880*q^2 + 4436343370355064781760*q^3 + 10480235829187788293541200*q^4 + 4334523913217708828687432160*q^5,
:  9007199791611920*q + 33280166638032780000830125260240*q^2 + 31793459480466352982770035441410278700480*q^3 + 74853716198066028184088802006910190805591415760*q^4 + 6555774847097833477496540727525056505538193164086240*q^5]
:END:

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
load("worksheet.sage")
DeltaList = []
for j in [0..deltam]:
    DeltaList.append(find_const_term(Mdkj[j],Deltaj[j]) + Deltaj[j])
DeltaList

R.<q> = PolynomialRing(QQ)
# # F.zeta_function()(-1)
# L = PolynomialRing(QQ,'x')
S.<s> = PolynomialRing(R)
points = [(1-kj[j], R(DeltaList[j])) for j in [0..deltam]]
# L = [(1,0.05),(0.1,0.11),(0.2,0.26),(0.3,0.35),(0.4,0.49),(0.5,0.67)]
# L = [(1,6),(2,9),(3,2),(4,5)]
L = forward_diff_poln(points)
# DeltaList
# [(1-kj[j], R(DeltaList[j])) for j in [0..deltam]]
f = L[0]
f

# an = 850783423272511/3
# an = 537002000
an = 35761498353853655680190125185730959415870
# divmod(an,p)
L

# an.factor()
#+end_src

#+RESULTS:
:RESULTS:
: F =  Number Field in a with defining polynomial x^2 - 17 
: p =  11 
: k0 =  2 
: m =  10 
: psi =  Dirichlet character modulo 11 of conductor 1 mapping 2 |--> 1
# [goto error]
: 
: NameErrorTraceback (most recent call last)
: <ipython-input-17-9307c2c60334> in <module>
:      12 # L = [(1,0.05),(0.1,0.11),(0.2,0.26),(0.3,0.35),(0.4,0.49),(0.5,0.67)]
:      13 # L = [(1,6),(2,9),(3,2),(4,5)]
: ---> 14 L = forward_diff_poln(points)
:      15 # DeltaList
:      16 # [(1-kj[j], R(DeltaList[j])) for j in [0..deltam]]
: 
: NameError: name 'forward_diff_poln' is not defined
:END:

* Table of values
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar

L_table = [[3,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + O(5^8)*s^8 + (5^6 * 12 + O(5^8))*s^7 + (5^6 * 18 + O(5^8))*s^6 + (5^4 * 308 + O(5^8))*s^5 + (5^5 * 12 + O(5^8))*s^4 + (5^3 * 811 + O(5^8))*s^3 + (5^3 * 1839 + O(5^8))*s^2 + (5 * 202997 + O(5^9))*s + 8760231 + O(5^10),
  1],
 [3,
  7,
  O(7^9)*s^12 + O(7^9)*s^11 + O(7^9)*s^10 + (7^8 * 4 + O(7^9))*s^9 + (7^7 * 26 + O(7^9))*s^8 + (7^6 * 339 + O(7^9))*s^7 + (7^6 * 41 + O(7^9))*s^6 + (7^5 * 1955 + O(7^9))*s^5 + (7^4 * 12339 + O(7^9))*s^4 + (7^3 * 43352 + O(7^9))*s^3 + (7^2 * 755539 + O(7^9))*s^2 + (7 * 2363400 + O(7^9))*s + 236098386 + O(7^10),
  1],
 [3,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 7 + O(11^10))*s^9 + (11^9 * 9 + O(11^10))*s^8 + (11^7 * 983 + O(11^10))*s^7 + (11^6 * 2077 + O(11^10))*s^6 + (11^5 * 99624 + O(11^10))*s^5 + (11^4 * 874530 + O(11^10))*s^4 + (11^3 * 15178197 + O(11^10))*s^3 + (11^2 * 760252 + O(11^9))*s^2 + (11 * 125621362 + O(11^9))*s + 18201420921 + O(11^10),
  1],
 [3,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 10 + O(13^10))*s^9 + (13^8 * 118 + O(13^10))*s^8 + (13^7 * 811 + O(13^10))*s^7 + (13^6 * 210 + O(13^10))*s^6 + (13^5 * 88733 + O(13^10))*s^5 + (13^4 * 3403408 + O(13^10))*s^4 + (13^4 * 2585989 + O(13^10))*s^3 + (13^2 * 84148803 + O(13^10))*s^2 + (13 * 9530516807 + O(13^10))*s + 41080902718 + O(13^10),
  1],
 [3,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 10 + O(17^10))*s^9 + (17^8 * 277 + O(17^10))*s^8 + (17^7 * 2442 + O(17^10))*s^7 + (17^6 * 20929 + O(17^10))*s^6 + (17^5 * 144868 + O(17^10))*s^5 + (17^4 * 16905741 + O(17^10))*s^4 + (17^3 * 15764965 + O(17^10))*s^3 + (17^2 * 4172504534 + O(17^10))*s^2 + (17^2 * 6858913505 + O(17^10))*s + 1413992627558 + O(17^10),
  1],
 [3,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 5 + O(19^10))*s^9 + (19^8 * 96 + O(19^10))*s^8 + (19^7 * 2895 + O(19^10))*s^7 + (19^6 * 56680 + O(19^10))*s^6 + (19^5 * 2164758 + O(19^10))*s^5 + (19^4 * 9456125 + O(19^10))*s^4 + (19^3 * 809885956 + O(19^10))*s^3 + (19^2 * 10906738871 + O(19^10))*s^2 + (19 * 19464966193 + O(19^10))*s + 6019547436581 + O(19^10),
  1],
 [5,
  7,
  O(7^9)*s^12 + O(7^9)*s^11 + O(7^9)*s^10 + (7^8 * 4 + O(7^9))*s^9 + (7^8 * 4 + O(7^9))*s^8 + (7^6 * 208 + O(7^9))*s^7 + (7^8 * 1 + O(7^9))*s^6 + (7^6 * 243 + O(7^9))*s^5 + (7^4 * 15653 + O(7^9))*s^4 + (7^3 * 22086 + O(7^9))*s^3 + (7^4 * 7382 + O(7^9))*s^2 + (7 * 5689441 + O(7^9))*s + 71672332 + O(7^10),
  1],
 [5,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 4 + O(11^10))*s^9 + (11^8 * 60 + O(11^10))*s^8 + (11^8 * 90 + O(11^10))*s^7 + (11^6 * 5454 + O(11^10))*s^6 + (11^5 * 110949 + O(11^10))*s^5 + (11^4 * 228342 + O(11^10))*s^4 + (11^3 * 18710299 + O(11^10))*s^3 + (11^2 * 17898084 + O(11^9))*s^2 + (11 * 18593682 + O(11^9))*s + 11442740877 + O(11^10),
  1],
 [5,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 5 + O(13^10))*s^9 + (13^8 * 98 + O(13^10))*s^8 + (13^7 * 796 + O(13^10))*s^7 + (13^6 * 22310 + O(13^10))*s^6 + (13^5 * 349495 + O(13^10))*s^5 + (13^4 * 2841937 + O(13^10))*s^4 + (13^3 * 3548109 + O(13^10))*s^3 + (13^2 * 66655463 + O(13^10))*s^2 + (13 * 8944880057 + O(13^10))*s + 131896341028 + O(13^10),
  1],
 [5,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 4 + O(17^10))*s^9 + (17^8 * 114 + O(17^10))*s^8 + (17^8 * 225 + O(17^10))*s^7 + (17^6 * 5926 + O(17^10))*s^6 + (17^5 * 661465 + O(17^10))*s^5 + (17^4 * 1496066 + O(17^10))*s^4 + (17^3 * 229858812 + O(17^10))*s^3 + (17^2 * 5594529143 + O(17^10))*s^2 + (17 * 114213638787 + O(17^10))*s + 148373169844 + O(17^10),
  1],
 [5,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 8 + O(19^10))*s^9 + (19^8 * 263 + O(19^10))*s^8 + (19^8 * 328 + O(19^10))*s^7 + (19^6 * 62345 + O(19^10))*s^6 + (19^5 * 1528305 + O(19^10))*s^5 + (19^4 * 33982703 + O(19^10))*s^4 + (19^3 * 273084442 + O(19^10))*s^3 + (19^2 * 6707175035 + O(19^10))*s^2 + (19 * 202154094925 + O(19^10))*s + 4626869428673 + O(19^10),
  1],
 [7,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + (5^7 * 1 + O(5^8))*s^8 + (5^6 * 2 + O(5^8))*s^7 + (5^5 * 49 + O(5^8))*s^6 + (5^4 * 568 + O(5^8))*s^5 + (5^4 * 186 + O(5^8))*s^4 + (5^3 * 2476 + O(5^8))*s^3 + (5^2 * 12643 + O(5^8))*s^2 + (5 * 116522 + O(5^9))*s + 1005394 + O(5^10),
  1],
 [7,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 9 + O(11^10))*s^9 + (11^8 * 45 + O(11^10))*s^8 + (11^7 * 538 + O(11^10))*s^7 + (11^6 * 5908 + O(11^10))*s^6 + (11^5 * 94233 + O(11^10))*s^5 + (11^4 * 653451 + O(11^10))*s^4 + (11^3 * 1368033 + O(11^10))*s^3 + (11^3 * 691404 + O(11^9))*s^2 + (11 * 43622653 + O(11^9))*s + 25656523351 + O(11^10),
  1],
 [7,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 9 + O(13^10))*s^9 + (13^8 * 167 + O(13^10))*s^8 + (13^7 * 825 + O(13^10))*s^7 + (13^6 * 20775 + O(13^10))*s^6 + (13^5 * 260717 + O(13^10))*s^5 + (13^4 * 3958931 + O(13^10))*s^4 + (13^3 * 10298345 + O(13^10))*s^3 + (13^3 * 37593275 + O(13^10))*s^2 + (13 * 10196962616 + O(13^10))*s + 104887446825 + O(13^10),
  1],
 [7,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 16 + O(17^10))*s^9 + (17^9 * 11 + O(17^10))*s^8 + (17^7 * 3442 + O(17^10))*s^7 + (17^6 * 43576 + O(17^10))*s^6 + (17^5 * 731121 + O(17^10))*s^5 + (17^4 * 19535454 + O(17^10))*s^4 + (17^3 * 2220157 + O(17^10))*s^3 + (17^2 * 311956925 + O(17^10))*s^2 + (17 * 12743287888 + O(17^10))*s + 497360978290 + O(17^10),
  1],
 [7,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 3 + O(19^10))*s^9 + (19^8 * 356 + O(19^10))*s^8 + (19^7 * 5512 + O(19^10))*s^7 + (19^6 * 86567 + O(19^10))*s^6 + (19^5 * 784303 + O(19^10))*s^5 + (19^4 * 35196026 + O(19^10))*s^4 + (19^3 * 755707686 + O(19^10))*s^3 + (19^2 * 13133906787 + O(19^10))*s^2 + (19 * 27470894456 + O(19^10))*s + 226617386081 + O(19^10),
  1],
 [11,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + O(5^8)*s^8 + (5^6 * 12 + O(5^8))*s^7 + (5^5 * 29 + O(5^8))*s^6 + (5^6 * 19 + O(5^8))*s^5 + (5^5 * 51 + O(5^8))*s^4 + (5^3 * 2366 + O(5^8))*s^3 + (5^2 * 4658 + O(5^8))*s^2 + (5^2 * 31778 + O(5^9))*s + 8760227 + O(5^10),
  1],
 [11,
  7,
  O(7^10)*s^12 + O(7^10)*s^11 + O(7^10)*s^10 + (7^8 * 41 + O(7^10))*s^9 + (7^7 * 129 + O(7^10))*s^8 + (7^6 * 225 + O(7^10))*s^7 + (7^6 * 1510 + O(7^10))*s^6 + (7^5 * 1072 + O(7^10))*s^5 + (7^5 * 10214 + O(7^10))*s^4 + (7^3 * 584078 + O(7^10))*s^3 + (7^2 * 2653184 + O(7^10))*s^2 + (7 * 28763398 + O(7^10))*s + 7 * 215620578 + O(7^11),
  1],
 [11,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 3 + O(13^10))*s^9 + (13^8 * 135 + O(13^10))*s^8 + (13^7 * 96 + O(13^10))*s^7 + (13^7 * 1000 + O(13^10))*s^6 + (13^5 * 96866 + O(13^10))*s^5 + (13^4 * 3797290 + O(13^10))*s^4 + (13^3 * 27334858 + O(13^10))*s^3 + (13^2 * 241084003 + O(13^10))*s^2 + (13 * 2972219987 + O(13^10))*s + 126143789316 + O(13^10),
  1],
 [11,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 11 + O(17^10))*s^9 + (17^8 * 248 + O(17^10))*s^8 + (17^7 * 2139 + O(17^10))*s^7 + (17^6 * 29250 + O(17^10))*s^6 + (17^5 * 198894 + O(17^10))*s^5 + (17^4 * 19130997 + O(17^10))*s^4 + (17^3 * 122147151 + O(17^10))*s^3 + (17^2 * 5790992169 + O(17^10))*s^2 + (17 * 111489195882 + O(17^10))*s + 1268552808246 + O(17^10),
  1],
 [11,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 5 + O(19^10))*s^9 + (19^8 * 254 + O(19^10))*s^8 + (19^7 * 6032 + O(19^10))*s^7 + (19^6 * 35759 + O(19^10))*s^6 + (19^5 * 81934 + O(19^10))*s^5 + (19^4 * 15296335 + O(19^10))*s^4 + (19^3 * 371023933 + O(19^10))*s^3 + (19^2 * 15842775385 + O(19^10))*s^2 + (19 * 277481387886 + O(19^10))*s + 1316334782055 + O(19^10),
  1],
 [13,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + (5^7 * 2 + O(5^8))*s^8 + (5^6 * 24 + O(5^8))*s^7 + (5^5 * 101 + O(5^8))*s^6 + (5^4 * 104 + O(5^8))*s^5 + (5^4 * 612 + O(5^8))*s^4 + (5^3 * 2717 + O(5^8))*s^3 + (5^2 * 7227 + O(5^8))*s^2 + (5 * 184921 + O(5^9))*s + 9262926 + O(5^10),
  1],
 [13,
  7,
  O(7^9)*s^12 + O(7^9)*s^11 + O(7^9)*s^10 + (7^8 * 3 + O(7^9))*s^9 + (7^8 * 6 + O(7^9))*s^8 + (7^6 * 113 + O(7^9))*s^7 + (7^6 * 270 + O(7^9))*s^6 + (7^5 * 222 + O(7^9))*s^5 + (7^4 * 5373 + O(7^9))*s^4 + (7^3 * 108002 + O(7^9))*s^3 + (7^3 * 32121 + O(7^9))*s^2 + (7 * 5282472 + O(7^9))*s + 139130585 + O(7^10),
  1],
 [13,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 3 + O(11^10))*s^9 + (11^8 * 112 + O(11^10))*s^8 + (11^7 * 665 + O(11^10))*s^7 + (11^6 * 13649 + O(11^10))*s^6 + (11^5 * 27449 + O(11^10))*s^5 + (11^4 * 356795 + O(11^10))*s^4 + (11^3 * 12609371 + O(11^10))*s^3 + (11^2 * 16921796 + O(11^9))*s^2 + (11^2 * 6904426 + O(11^9))*s + 17265725325 + O(11^10),
  1],
 [13,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 15 + O(17^10))*s^9 + (17^8 * 159 + O(17^10))*s^8 + (17^7 * 650 + O(17^10))*s^7 + (17^6 * 34395 + O(17^10))*s^6 + (17^5 * 657113 + O(17^10))*s^5 + (17^4 * 16066865 + O(17^10))*s^4 + (17^3 * 211427195 + O(17^10))*s^3 + (17^2 * 1985311061 + O(17^10))*s^2 + (17 * 113783197125 + O(17^10))*s + 752572357148 + O(17^10),
  1],
 [13,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 18 + O(19^10))*s^9 + (19^8 * 3 + O(19^10))*s^8 + (19^7 * 6571 + O(19^10))*s^7 + (19^6 * 78198 + O(19^10))*s^6 + (19^5 * 2050739 + O(19^10))*s^5 + (19^4 * 32417950 + O(19^10))*s^4 + (19^3 * 592726987 + O(19^10))*s^3 + (19^2 * 12005240886 + O(19^10))*s^2 + (19^2 * 16635103 + O(19^10))*s + 2411819848950 + O(19^10),
  1],
 [17,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + (5^7 * 2 + O(5^8))*s^8 + (5^7 * 2 + O(5^8))*s^7 + (5^5 * 79 + O(5^8))*s^6 + (5^4 * 617 + O(5^8))*s^5 + (5^4 * 297 + O(5^8))*s^4 + (5^4 * 83 + O(5^8))*s^3 + (5^2 * 2888 + O(5^8))*s^2 + (5 * 336823 + O(5^9))*s + 8257532 + O(5^10),
  1],
 [17,
  7,
  O(7^9)*s^12 + O(7^9)*s^11 + O(7^9)*s^10 + O(7^9)*s^9 + (7^7 * 20 + O(7^9))*s^8 + (7^6 * 213 + O(7^9))*s^7 + (7^8 * 1 + O(7^9))*s^6 + (7^6 * 137 + O(7^9))*s^5 + (7^4 * 4798 + O(7^9))*s^4 + (7^4 * 8714 + O(7^9))*s^3 + (7^2 * 320926 + O(7^9))*s^2 + (7 * 3531938 + O(7^9))*s + 118049195 + O(7^10),
  1],
 [17,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 5 + O(11^10))*s^9 + (11^8 * 84 + O(11^10))*s^8 + (11^8 * 68 + O(11^10))*s^7 + (11^6 * 2975 + O(11^10))*s^6 + (11^5 * 7600 + O(11^10))*s^5 + (11^4 * 1070972 + O(11^10))*s^4 + (11^3 * 12195757 + O(11^10))*s^3 + (11^2 * 2023771 + O(11^9))*s^2 + (11 * 187806986 + O(11^9))*s + 1971146632 + O(11^10),
  1],
 [17,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 3 + O(13^10))*s^9 + (13^8 * 7 + O(13^10))*s^8 + (13^8 * 122 + O(13^10))*s^7 + (13^6 * 17982 + O(13^10))*s^6 + (13^5 * 187502 + O(13^10))*s^5 + (13^4 * 1934502 + O(13^10))*s^4 + (13^3 * 49249991 + O(13^10))*s^3 + (13^3 * 32599271 + O(13^10))*s^2 + (13 * 1785368587 + O(13^10))*s + 112985143579 + O(13^10),
  1],
 [17,
  19,
  O(19^10)*s^11 + O(19^10)*s^10 + (19^9 * 14 + O(19^10))*s^9 + (19^8 * 205 + O(19^10))*s^8 + (19^8 * 53 + O(19^10))*s^7 + (19^6 * 39736 + O(19^10))*s^6 + (19^5 * 1822396 + O(19^10))*s^5 + (19^4 * 17181272 + O(19^10))*s^4 + (19^3 * 195505362 + O(19^10))*s^3 + (19^2 * 5566323090 + O(19^10))*s^2 + (19 * 279819201226 + O(19^10))*s + 857090632219 + O(19^10),
  1],
 [19,
  5,
  O(5^8)*s^14 + O(5^8)*s^13 + O(5^8)*s^12 + O(5^8)*s^11 + O(5^8)*s^10 + O(5^8)*s^9 + (5^7 * 1 + O(5^8))*s^8 + (5^6 * 13 + O(5^8))*s^7 + (5^5 * 71 + O(5^8))*s^6 + (5^6 * 9 + O(5^8))*s^5 + (5^4 * 616 + O(5^8))*s^4 + (5^3 * 919 + O(5^8))*s^3 + (5^2 * 1437 + O(5^8))*s^2 + (5^3 * 5104 + O(5^9))*s + 4021584 + O(5^10),
  1],
 [19,
  7,
  O(7^9)*s^12 + O(7^9)*s^11 + O(7^9)*s^10 + (7^8 * 2 + O(7^9))*s^9 + (7^7 * 18 + O(7^9))*s^8 + (7^6 * 102 + O(7^9))*s^7 + (7^6 * 46 + O(7^9))*s^6 + (7^5 * 2300 + O(7^9))*s^5 + (7^4 * 14747 + O(7^9))*s^4 + (7^3 * 68723 + O(7^9))*s^3 + (7^2 * 63824 + O(7^9))*s^2 + (7 * 3458640 + O(7^9))*s + 252965701 + O(7^10),
  1],
 [19,
  11,
  O(11^9)*s^12 + O(11^9)*s^11 + O(11^10)*s^10 + (11^9 * 7 + O(11^10))*s^9 + (11^8 * 19 + O(11^10))*s^8 + (11^8 * 70 + O(11^10))*s^7 + (11^6 * 5045 + O(11^10))*s^6 + (11^5 * 51530 + O(11^10))*s^5 + (11^4 * 35059 + O(11^10))*s^4 + (11^3 * 303241 + O(11^10))*s^3 + (11^2 * 10918285 + O(11^9))*s^2 + (11 * 185569412 + O(11^9))*s + 10904201335 + O(11^10),
  1],
 [19,
  13,
  O(13^10)*s^11 + O(13^10)*s^10 + (13^9 * 11 + O(13^10))*s^9 + (13^8 * 67 + O(13^10))*s^8 + (13^7 * 1661 + O(13^10))*s^7 + (13^6 * 18848 + O(13^10))*s^6 + (13^5 * 309709 + O(13^10))*s^5 + (13^4 * 114596 + O(13^10))*s^4 + (13^3 * 12646173 + O(13^10))*s^3 + (13^2 * 30830175 + O(13^10))*s^2 + (13 * 7019191945 + O(13^10))*s + 25070786443 + O(13^10),
  1],
 [19,
  17,
  O(17^10)*s^11 + O(17^10)*s^10 + (17^9 * 9 + O(17^10))*s^9 + (17^8 * 37 + O(17^10))*s^8 + (17^7 * 1523 + O(17^10))*s^7 + (17^6 * 63559 + O(17^10))*s^6 + (17^5 * 1419201 + O(17^10))*s^5 + (17^4 * 22736091 + O(17^10))*s^4 + (17^3 * 257268893 + O(17^10))*s^3 + (17^2 * 1500101779 + O(17^10))*s^2 + (17^2 * 2651644466 + O(17^10))*s + 268857306940 + O(17^10),
  1]]


latex(table(L_table[:5][1:],frame=True))
L_table
#+end_src

#+RESULTS:
#+begin_example
[[3,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 390625*s^8 + 578125*s^7 + 671875*s^6 + 583125*s^5 + 428125*s^4 + 492000*s^3 + 620500*s^2 + 2968110*s + 18525856,
  1],
 [3,
  7,
  40353607*s^12 + 40353607*s^11 + 40353607*s^10 + 63412811*s^9 + 61765725*s^8 + 80236618*s^7 + 45177216*s^6 + 73211292*s^5 + 69979546*s^4 + 55223343*s^3 + 77375018*s^2 + 56897407*s + 518573635,
  1],
 [3,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 42443058438*s^9 + 47158953820*s^8 + 45093313694*s^7 + 29616956798*s^6 + 41981969425*s^5 + 38741418331*s^4 + 46139604808*s^3 + 2449938183*s^2 + 3739782673*s + 44138845522,
  1],
 [3,
  13,
  137858491849*s^11 + 137858491849*s^10 + 243903485579*s^9 + 234114716927*s^8 + 188747539136*s^7 + 138872121739*s^6 + 170804433618*s^5 + 235063227737*s^4 + 211716923678*s^3 + 152079639556*s^2 + 261755210340*s + 178939394567,
  1],
 [3,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 3201872665419*s^9 + 3948278711606*s^8 + 3018040939915*s^7 + 2521169082050*s^6 + 2221685744325*s^5 + 3427978294510*s^4 + 2093447173494*s^3 + 3221847710775*s^2 + 3998219903394*s + 3429986528007,
  1],
 [3,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 7744504746696*s^9 + 7761488309737*s^8 + 8718824942206*s^7 + 8797626792881*s^6 + 11491221376843*s^5 + 7363397923926*s^4 + 11686074030005*s^3 + 10068398990232*s^2 + 6500900615468*s + 12150613694382,
  1],
 [5,
  7,
  40353607*s^12 + 40353607*s^11 + 40353607*s^10 + 63412811*s^9 + 63412811*s^8 + 64824599*s^7 + 46118408*s^6 + 68942314*s^5 + 77936460*s^4 + 47929105*s^3 + 58077789*s^2 + 80179694*s + 354147581,
  1],
 [5,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 35369215365*s^9 + 38798957461*s^8 + 45229723891*s^7 + 35599518295*s^6 + 43805872000*s^5 + 29280579823*s^4 + 50840832570*s^3 + 4523615855*s^2 + 2562478193*s + 37380165478,
  1],
 [5,
  13,
  137858491849*s^11 + 137858491849*s^10 + 190880988714*s^9 + 217800102507*s^8 + 187806311381*s^7 + 245544600639*s^6 + 267623538884*s^5 + 219027054506*s^4 + 145653687322*s^3 + 149123265096*s^2 + 254141932590*s + 269754832877,
  1],
 [5,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 2490345406437*s^9 + 2811230248723*s^8 + 3585539324674*s^7 + 2159033134343*s^6 + 2955179610954*s^5 + 2140946828835*s^4 + 3145290243805*s^3 + 3632812822776*s^2 + 3957625759828*s + 2164367070293,
  1],
 [5,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 8712567840033*s^9 + 10597743337584*s^8 + 11701674935249*s^7 + 9064141708746*s^6 + 9915300739996*s^5 + 10559726095464*s^4 + 8004152445479*s^3 + 8552356445436*s^2 + 9971994061376*s + 10757935686474,
  1],
 [7,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 468750*s^8 + 421875*s^7 + 543750*s^6 + 745625*s^5 + 506875*s^4 + 700125*s^3 + 706700*s^2 + 2535735*s + 10771019,
  1],
 [7,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 47158953820*s^9 + 35583574246*s^8 + 36421522599*s^7 + 36403806989*s^6 + 41113743484*s^5 + 35504600692*s^4 + 27758276524*s^3 + 3278206415*s^2 + 2837796874*s + 51593947952,
  1],
 [7,
  13,
  137858491849*s^11 + 137858491849*s^10 + 233298986206*s^9 + 274085522256*s^8 + 189626018374*s^7 + 238135448824*s^6 + 234660888930*s^5 + 250929520140*s^4 + 160483955814*s^3 + 220450917024*s^2 + 270419005857*s + 242745938674,
  1],
 [7,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 3913399924401*s^9 + 3320460541916*s^8 + 3428379612915*s^7 + 3067812607193*s^6 + 3054081170146*s^5 + 3647614553983*s^4 + 2026901531790*s^3 + 2106149451774*s^2 + 2232629794545*s + 2513354878739,
  1],
 [7,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 7099129351138*s^9 + 12177214700397*s^8 + 11058087283169*s^7 + 10203687038328*s^6 + 8073078131798*s^5 + 10717847562147*s^4 + 11314465276075*s^3 + 10872406607908*s^2 + 6653013252465*s + 6357683643882,
  1],
 [11,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 390625*s^8 + 578125*s^7 + 481250*s^6 + 687500*s^5 + 550000*s^4 + 686375*s^3 + 507075*s^2 + 2747575*s + 18525852,
  1],
 [11,
  7,
  282475249*s^12 + 282475249*s^11 + 282475249*s^10 + 518832090*s^9 + 388712296*s^8 + 308946274*s^7 + 460125239*s^6 + 300492353*s^5 + 454141947*s^4 + 482814003*s^3 + 412481265*s^2 + 483819035*s + 3486670789,
  1],
 [11,
  13,
  137858491849*s^11 + 137858491849*s^10 + 169671989968*s^9 + 247982139184*s^8 + 143882349481*s^7 + 200607008849*s^6 + 173824159587*s^5 + 246312891539*s^4 + 197913174875*s^3 + 178601688356*s^2 + 176497351680*s + 264002281165,
  1],
 [11,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 3320460541916*s^9 + 3745981745817*s^8 + 2893708321996*s^7 + 2722017793699*s^6 + 2298394938607*s^5 + 3613833900886*s^4 + 2616102853312*s^3 + 3689590637290*s^2 + 3911310230443*s + 3284546708695,
  1],
 [11,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 7744504746696*s^9 + 10444891270215*s^8 + 11522900587449*s^7 + 7813379916480*s^6 + 6333942953267*s^5 + 8124499931336*s^4 + 8675919414248*s^3 + 11850308171786*s^2 + 11403212627635*s + 7447401039856,
  1],
 [13,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 546875*s^8 + 765625*s^7 + 706250*s^6 + 455625*s^5 + 773125*s^4 + 730250*s^3 + 571300*s^2 + 2877730*s + 19028551,
  1],
 [13,
  7,
  40353607*s^12 + 40353607*s^11 + 40353607*s^10 + 57648010*s^9 + 74942413*s^8 + 53647944*s^7 + 72118837*s^6 + 44084761*s^5 + 53254180*s^4 + 77398293*s^3 + 51371110*s^2 + 77330911*s + 421605834,
  1],
 [13,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 33011267674*s^9 + 49945619273*s^8 + 38896393316*s^7 + 50117460690*s^6 + 30358113500*s^5 + 31161260196*s^4 + 42720497402*s^3 + 4405485007*s^2 + 3193383237*s + 43203149926,
  1],
 [13,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 3794812047904*s^9 + 3125139333568*s^8 + 2282714037899*s^7 + 2846205586204*s^6 + 2949000393290*s^5 + 3357914532114*s^4 + 3054735709484*s^3 + 2589748797078*s^2 + 3950308251574*s + 2768566257597,
  1],
 [13,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 11939444817823*s^9 + 6182016946924*s^8 + 12004697454770*s^7 + 9809960060239*s^6 + 11208899044962*s^5 + 10355805919751*s^4 + 10196580661634*s^3 + 10464958217647*s^2 + 6137071529984*s + 8542886106751,
  1],
 [17,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 546875*s^8 + 546875*s^7 + 637500*s^6 + 776250*s^5 + 576250*s^4 + 442500*s^3 + 462825*s^2 + 3637240*s + 18023157,
  1],
 [17,
  7,
  40353607*s^12 + 40353607*s^11 + 40353607*s^10 + 40353607*s^9 + 56824467*s^8 + 65412844*s^7 + 46118408*s^6 + 56471520*s^5 + 51873605*s^4 + 61275921*s^3 + 56078981*s^2 + 65077173*s + 400524444,
  1],
 [17,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 37727163056*s^9 + 43943570605*s^8 + 40513828509*s^7 + 31207818576*s^6 + 27161412201*s^5 + 41617525653*s^4 + 42169977168*s^3 + 2602823982*s^2 + 4423824537*s + 27908571233,
  1],
 [17,
  13,
  137858491849*s^11 + 137858491849*s^10 + 169671989968*s^9 + 143568606896*s^8 + 237377639811*s^7 + 224654171287*s^6 + 207476671935*s^5 + 193109803471*s^4 + 246060722076*s^3 + 209479090236*s^2 + 161068283480*s + 250843635428,
  1],
 [17,
  19,
  6131066257801*s^11 + 6131066257801*s^10 + 10648694026707*s^9 + 9612696681206*s^8 + 7031195098974*s^7 + 8000481385217*s^6 + 10643499171005*s^5 + 8370146806113*s^4 + 7472037535759*s^3 + 8140508893291*s^2 + 11447631081095*s + 6988156890020,
  1],
 [19,
  5,
  390625*s^14 + 390625*s^13 + 390625*s^12 + 390625*s^11 + 390625*s^10 + 390625*s^9 + 468750*s^8 + 593750*s^7 + 612500*s^6 + 531250*s^5 + 775625*s^4 + 505500*s^3 + 426550*s^2 + 2591125*s + 13787209,
  1],
 [19,
  7,
  40353607*s^12 + 40353607*s^11 + 40353607*s^10 + 51883209*s^9 + 55177381*s^8 + 52353805*s^7 + 45765461*s^6 + 79009707*s^5 + 75761154*s^4 + 63925596*s^3 + 43480983*s^2 + 64564087*s + 535440950,
  1],
 [19,
  11,
  2357947691*s^12 + 2357947691*s^11 + 25937424601*s^10 + 42443058438*s^9 + 30010243340*s^8 + 40942546271*s^7 + 34874949846*s^6 + 34236382631*s^5 + 26450723420*s^4 + 26341038372*s^3 + 3679060176*s^2 + 4399211223*s + 36841625936,
  1],
 [19,
  13,
  137858491849*s^11 + 137858491849*s^10 + 254507984952*s^9 + 192512450156*s^8 + 242083778586*s^7 + 228834187881*s^6 + 252851275586*s^5 + 141131468205*s^4 + 165642133930*s^3 + 143068791424*s^2 + 229107987134*s + 162929278292,
  1],
 [19,
  17,
  2015993900449*s^11 + 2015993900449*s^10 + 3083284788922*s^9 + 2274096925766*s^8 + 2640939699428*s^7 + 3550153648520*s^6 + 4031056374706*s^5 + 3914934956860*s^4 + 3279955971758*s^3 + 2449523314580*s^2 + 2782319151123*s + 2284851207389,
  1]]
#+end_example

* Reverse engineering Alan's code:
#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
from sage.modular.overconvergent.hecke_series import complementary_spaces
N = 4
p = 5
m = 6
k0 = 0
n = floor((p+1)*(m+1)/(p-1))
mdash = m + ceil(n/(p+1))
elldash = ModularForms(Gamma0(N),k0+(p-1)*n).sturm_bound()
# bound = 2*len(LWBModp) 
# len(complementary_spaces(N,p,k0,n,mdash,elldash*p,elldash,False,bound=8))
Epm1 = eisenstein_series_qexp(p-1, prec=elldash*p, K = Zmod(p**mdash),
                              normalization="constant")
Epm1.parent()(1)
#+end_src

#+RESULTS:
: 1

Scoping in python:

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar :cache no
R = zero_matrix(ZZ,2,3)
print("We define a matrix R:", R)

def set_corner(R):
    R[0,0] = 2
    # change_R(R)
    # print("inside set_corner, running change_R gives R=", R)

set_corner(R)
print("We run set_corner, after which R =", R)
def change_R(R):
    R[1,2] = 3
#+end_src

#+RESULTS:
: We define a matrix R: [0 0 0]
: [0 0 0]
: We run set_corner, after which R = [2 0 0]
: [0 0 0]

* Hecke matrix operations

#+begin_src jupyter-python :session py :kernel sagemath :exports both :results scalar
def right_action_ideal(Q, n,d,j):  # WIP!!!
    a,b,c = list(Q)
    D = Q.discriminant()
    tau = (-b+sqrt(D))/(2*a)
    # "hecke" matrix:
    # [n/d j]
    # [0   d]
    return([2*n*a,-b*d^2])
    
#+end_src
