import time
# import Cython.Compiler.Options
# Cython.Compiler.Options.annotate = True
from sage.all import *
# from sage.rings.rational import Rational

def Delta_data(Q, int m):
    """For a fixed qf Q and an upper bound m, return a list L of
    length m where each L[m] is a list of forms [Qm] similar to
    the output nr_forms of get_RM_set

    """
    
    # assert is_fundamental_discriminant(Q.discriminant()) 
    A_pos_old, A_neg_old, forms_old = get_RM_set(1,1,[[list(Q),[[1,0],[0,1]]]])
    forms = [forms_old]
    As = [[A_pos_old,A_neg_old]]
    for n in range(2,m):         # m = 2,...,m-1
        p = min(divisors(n)[1:]) # smallest prime divisor (note m != 1)
        d = n/(p**(valuation(n,p)))
        A_pos_new, A_neg_new, forms_new = get_RM_set(n,d,forms[d-1])
        forms.append(forms_new)
        As.append([A_pos_new,A_neg_new])
        # nred_forms.append(nr_forms)
    return([As, forms])
        
        
def get_RM_set(int n, int d, list forms_old):
    r"""Compute the set of RM-points RM(n, tau)_f using algorithm from
    [lauder-vonk2021]_

    Input:
    - $n$ a positive integer.
    - forms_old, a list of pairs [Q_old,gamma_old], where Q_old is a quadratic form of discriminant d^2 *D, and gamma_old a "Hecke matrix" of determinant d
    # - Optionally, $D$ the fundamental discriminant associated to the discriminant of Q_old.
    #
    Output: 
    - 

    Note that the norm of the ideal corresponding to F is precisely
    the first coefficient, a, which is required to be coprime to $f$.

    """



    ######
    # Compute Hecke matrices:
    assert n % d == 0
    cdef list Mn = Hecke_matrices(n/d)

    # Initialise some data:

    
    # start_time = time.time()
    cdef list forms_new = []
    cdef int k
    cdef list Q2
    cdef list gamman
    cdef bint flag              # This means binary integer, i.e. boolean
    cdef list gnp               # For our purposes, matrices are lists of lists
    cdef list Qnp
    cdef list nr_forms = []     # list of nearly reduced forms
    cdef list A_pos_new = []
    cdef list A_neg_new = []
    # Qlist = []
    for Q_old, gamma_old in forms_old:
        for k in range(len(Mn)):
            # print(gamma_old, Mn[k])
            gamma_new = Matrix(QQ, gamma_old)*Matrix(QQ, Mn[k])
            gamma_new_inv = gamma_new**(-1)
            # Q_new = matrix_action(Q_old, gamma_new.rows())

            # following RM_Points in DiagonalRestrictions.m:
            # why the fuck does this work
            a,b,c = Q_old
            q = Mn[k][0][0]
            r = Mn[k][0][1]
            s = Mn[k][1][0]
            t = Mn[k][1][1]
 	    # // Action of M2(Z), uses the fact that s=0 for these Hecke representatives!!
            
            A = q**2*a
            B = 2*q*r*a+b*n/d
            C = r**2*a + r*t*b + t**2*c
            Q_new = [A,B,C]
            
            # test if our buddy is equivalent to a
            # previously computed friendo:
            already_seen = False

            for Q, gamma in forms_new:
                eqmat = are_equivalent_mat(Q,Q_new)
                # print(eqmat)
                # if Q and Q_new are equivalent over \Q, this computes the matrix E such that
                # Q*E = Q_new
                # print("Eqmat:", eqmat)
                if eqmat:
                    # print(Q, "is equivalent to ", Q_new)
                    # Mat = mat_mult(mat_mult(gamma,eqmat), gamma_new_inv)
                    Mat = Matrix(QQ,gamma)*Matrix(QQ,eqmat)*gamma_new_inv
                    # print(Mat)
                    # print(Mat[0][0]*Mat[1][1]-Mat[0][1]*Mat[1][0])
                    # print("Matrix of equiv:", Mat)
                    if (Mat[0][0].is_integer() and
                        Mat[0][1].is_integer() and
                        Mat[1][0].is_integer() and
                        Mat[1][1].is_integer()):
                        already_seen = True
                        break
                        # No point in continuing if we found buddy-guy
                        # doesn't seem to speed up to much?
            # if we have a new friendo, add
            if not already_seen:
                # print(F,gcd(f, F[0]))
                # nr_forms += nearly_reduced_forms(list(Q_new))

                As_p, As_m = magma_algo(BinaryQF(Q_new))
                A_pos_new += As_p
                A_neg_new += As_m
                # print(Mn[k], Q_new, As_p)
                forms_new.append([Q_new, gamma_new])
                # add [Q_new,gamma_new] for next iteration

    # end_time = time.time()
    # print(f'Computing RM sets took {end_time - start_time} seconds')
    return([A_pos_new, A_neg_new, forms_new])

# cdef bint equivalent_pairs(list A, list B):
cpdef list are_equivalent_mat(Q1, Q2):
    F1, U1 = BinaryQF(Q1).reduced_form(transformation=True)
    F2, U2 = BinaryQF(Q2).reduced_form(transformation=True)
    F = F1
    # cdef list S = [[1,0],[0,1]]
    S = Matrix(QQ,[[1,0],[0,1]])
    cdef int d = floor(F.discriminant().sqrt(prec=30))
    cdef int a,b,c,cabs,sign,s
    while F != F2:
        a,b,c = list(F)
        if c > 0:
            cabs = c
            sign = 1
        else:
            cabs =  -c
            sign = -1
        if cabs >= d:
            s = sign * floor((cabs+b) / (2*cabs))
        else:
            s = sign * floor((d+b) / (2*cabs))
        # S = mat_mult(S, [[0,-1],[1,s]])
        S  = S* Matrix(QQ,[[0,-1],[1,s]])
        # F = F._Rho()
        F = BinaryQF(c, -b + 2*s*c, a - b*s + c*s*s)
        if F == F1:              # if they're not equivalent
            return False
    # print(U1,U2,S)
    # return(mat_mult(mat_mult(U1.rows(), S), (mat_inv(U2.rows()))))
    return((U1*S*U2**-1).rows())

# cdef bint is_in_SL2Z(list Q, int n, list gamman, list gnp):
#     # """Returns True if $\gamma_n'\mathrm{Stab(\tau)}\gamma_n^-1
#     # \subset \Sl_2(\Z), and false otherwise"""

#     cdef list Stab =  [               # Elements of Sl_2(Z)/+-I of finite order.
#         [[1,1],
#          [-1,0]],
#         [[1,0],
#          [0,1]],
#         [[1,-1],
#          [1,0]],
#         [[0,1],
#          [-1,1]],
#         [[0,1],
#          [-1,0]],
#         [[0,1],
#          [-1,-1]] ]
#     cdef list s
#     # cdef matrix Mat # -- not valid type, seems complicated
#     cdef list gamma_ninv = mat_inv_UT(gamman, n)  # no need to do this every time
#     for s in Stab:
#         # Z = matrix_action(Q, s) # no errors found here
#         # print(Z, Q, Z == Q)
#         if matrix_action(Q, s) == Q:  # test if s in stab(Q)
#             Mat = mat_mult(mat_mult(gnp,s), gamma_ninv)
#             # Mat = Matrix(gnp)*Matrix(s)*Matrix(gamman)**-1 # this is slower bc type conversion
#             # Check manually if things are integral:

#             if not (Mat[0][0].is_integer() and
#                     Mat[0][1].is_integer() and
#                     Mat[1][0].is_integer() and
#                     Mat[1][1].is_integer()):
#                 return(False)
                
#     return(True)


cdef list matrix_action(list Q, list A):
     # CF Lammermeyer BQFs p.4
     cdef int r = A[0][0]
     cdef int s = A[0][1]
     cdef int t = A[1][0]
     cdef int u = A[1][1]
     return([Q[0]*r**2 + Q[1]*r*t + Q[2]*t**2,
             2*(Q[0]*r*s + Q[2]*t*u) + Q[1]*(r*u + s*t),
             Q[0]*s**2 + Q[1]*s*u + Q[2]*u**2])



cpdef list mat_mult(list A, list B):
    return([[A[0][0]*B[0][0] + A[0][1]*B[1][0],
             A[0][0]*B[0][1] + A[0][1]*B[1][1]],
            [A[1][0]*B[0][0] + A[1][1]*B[1][0],
             A[1][0]*B[0][1] + A[1][1]*B[1][1]]])

cpdef list mat_inv(list A):
     cdef int n = A[0][0]*A[1][1]-A[0][1]*A[1][0]
     return([[A[1][1]/n, -A[0][1]/n], [-A[1][0]/n, A[0][0]/n]])

cpdef list nearly_reduced_forms(list F):
    Q = BinaryQF(F)
    Q0 = Q.reduced_form()
    Q = Q0                      # no need to keep info about F

    cdef int d = floor(Q.discriminant().sqrt(30))
    cdef list forms = []
    cdef bint started = False
    cdef int a,b,c,s,j
    while Q != Q0 or not started:
        started = True
        # print(Q)
        Q = Q._Rho()            # set Q to be next reduced form in cycle
        a,b,c = list(Q)
        if c > 0:
            cabs = c
        else:
            cabs =  -c
        # now compute s, number of forms on river between previous F and F:
        if cabs > d:
            s = abs(floor(b/(2*cabs)))
        else:
            s = abs(floor((d+b)/(2*cabs)))
        # print("s =", s)
        
        if a > 0:                                 # ensure form added has a>0
            for j in range(1,s+1):
                # print(j)
                # forms.append(F)
                # Fi =  # translate F
                # forms.append(matrix_action([a,b,c],[[1,0],[j,1]]))
                forms.append([a+j*b+j*j*c, b+2*j*c, c])
        else:
            for j in range(1,s+1):
                # print(j)
                # simply flip form if not
                # Fi = 
                forms.append([c, -b+2*j*c, a-j*b + j*j*c])
            
        # F = matrix_action(F, [[0,-1],[1,0]]) # after translating, flip
        
    return(forms)
                
cpdef list Hecke_matrices(int n):
    # start_time = time.time()
    # print(n)
    cdef int d
    cdef list Mn = []
    for d in divisors(n):
        # if gcd(d, n/d) == 1:
        for j in range(d):  # j= 0,...d-1
            Mn.append([[d,j], [0,n/d]])
    return(Mn)
                
cpdef list tp_elts_of_trace_n(F, int n, invDiff, int bd):
    """Returns list of totally positive elements of the inverse
    different of F of trace n"""
    a = F.gens()[0]
    # cdef int bd = floor(n*a)
    cdef int b
    cdef list nulist = []
    for b in range(-bd-1,bd+1):
        nu = (b + n*a)/(2*a)
        if nu > 0 and (-b + n*a)/(2*a) >0 and nu in invDiff:
            nulist.append(nu)
        # if F.ideal(nu).is_coprime(m):

    
    # return([(b + n*a)/(2*a) for b in [-bd..bd]])
    return(nulist)

cpdef list magma_algo(F):
    """Should correspond to nearly_reduced_forms, but translation of
    the magma algo, so pukes out A+-"""
    F0 = F.reduced_form()
    cdef list Fs = []
    F = F0
    cdef list As_p = []
    cdef list As_m = []
    
    started = False
    while F != F0 or not started:
        started = True
        a,b,c = list(F)
        F = F._Rho()
        s = ((b + F[1])/(2*c)).abs()
        if a > 0:
            for i in range(1,s+1):  # = 1,...,s 
                A = a + i*b + c*i**2 
                B = b + 2*i*c
                C = c
                As_p.append(A)
                As_m.append(C)
                # Fs.append([A, B, C])
                # Fs.append([C, -B, A])
        if a < 0:
            for i in range(1,s+1):
                A = c
                B = -b+2*i*c
                C = a-i*b + c*i**2
                As_p.append(A)
                As_m.append(C)
                # Fs.append([A, B, C])
                # Fs.append([C, -B, A])
    return [As_p,As_m]
