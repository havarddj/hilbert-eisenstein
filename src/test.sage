def is_HCF(D,P,p):
    """Given polynomial P, check

    - if extension of F = Q(sqrt D) generated by P has discriminant a
    power of D,

    - if extension is Galois,

    - if roots of P has correct valuations in extension with respect to L-values above the fixed prime p
    """

    F = QuadraticField(D)
    R.<x> = PolynomialRing(F)
    Pirr = R(P).factor()[0][0]

    H.<h> = F.extension(Pirr)

    if not log(H.absolute_discriminant(),D) in ZZ:
        print(f"Discriminant of H not power of {D}")
        return False

    if not H.is_galois_relative():
        print("H is not Galois over Q(sqrt D)")
        return False
    
    
    frakp = H.prime_factors(p)[0]

    root_valn_list = [r.ord(frakp) for r,_ in P.roots(H)]
    L_valn_list = [Q.Zagier_L_value()*genus_field_roots_of_1(D) for Q in BinaryQF_reduced_representatives(D)]
    if not (sorted(root_valn_list) == sorted(L_valn_list)):
        print(f"valuation lists are different: {root_valn_list} != {L_valn_list}")
        return False
    print("found candidate narrow Hilbert class field")
    return True    


def has_negative_fundamental_unit(D):
    """ Test if Q(sqrt D) has negative fundamental unit
    """
    F = QuadraticField(D)
    return F(F.unit_group().gens()[-1]).norm() == -1


def is_GS_disc(D,p):
    return (is_fundamental_discriminant(D)
            and kronecker_symbol(D, p) == -1
            and not has_negative_fundamental_unit(D))
